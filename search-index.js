var searchIndex = JSON.parse('{\
"pulau_rs":{"doc":"pulau-rs","t":[8,2,2,8,8,16,16,2,2,16,8,3,2,8,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,10,11,11,11,11,11,0,0,11,11,11,11,10,11,10,3,11,11,11,11,11,11,11,11,11,11,11,11,3,3,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AlgorithmContainer","ByRank","BySize","Connected","Find","HeuristicContainer","IdentifierType","QuickFind","QuickUnion","RepresentativeContainer","Union","UnionFind","Unweighted","VertexType","borrow","borrow_mut","connected","connected","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","find","find","from","heuristic","id","into","new","new","new","new","quickfind","quickunion","representative","try_from","try_into","type_id","union_sets","union_sets","usize","QuickFind","borrow","borrow_mut","connected","default","find","fmt","from","into","try_from","try_into","type_id","union_sets","ByRank","BySize","Heuristic","QuickUnion","Unweighted","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","connected","default","default","default","default","find","fmt","fmt","fmt","fmt","from","from","from","from","handle_decision","handle_decision","handle_decision","handle_decision","into","into","into","into","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union_sets"],"q":["pulau_rs","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","pulau_rs::quickfind","","","","","","","","","","","","","pulau_rs::quickunion","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["This trait represents the kind of containers that is …","","","Connected operation","Find operation","Any kind of contiguous container","","","","Any kind of contiguous container (should not be ZST). <code>R</code> …","Union operation","<code>UnionFind</code> data structure","","Any type that can be used to index internal buffer","","","","Checks whether 2 nodes are connected to each other","","","","","","","","","","","","","","","","","","","","","","Finds a node","Returns the argument unchanged.","Gets the heuristic slice","","Calls <code>U::from(self)</code>.","","","","","Quick Find implementations","Quick Union implementation","Gets the representative slice","","","","","Unions 2 node. If those 2 nodes are already part of the …","","<code>QuickFind</code> algorithm","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","Link by rank of tree","Link by size of tree","Heuristic for quick union algorithm","<code>QuickUnion</code> algorithm","No heuristic linking","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,19,20,0,0,19,0,0,0,0,2,2,21,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,22,2,2,2,20,2,2,2,2,2,0,0,2,2,2,2,23,2,20,0,7,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,12,9,10,3,12,9,10,3,3,12,9,10,3,3,12,9,10,3,12,9,10,3,24,12,9,10,12,9,10,3,12,9,10,3,12,9,10,3,12,9,10,3,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[],1],[2,1],[[],[[2,[3,4]]]],[[],[[2,[3,5]]]],[[],[[2,[3,6]]]],[[],[[2,[7,8]]]],[[],[[2,[[3,[9]],6]]]],[[],[[2,[[3,[9]],8]]]],[[],[[2,[[3,[9]],4]]]],[[],[[2,[3,8]]]],[[],[[2,[[3,[10]],4]]]],[[],[[2,[[3,[9]],5]]]],[[],[[2,[[3,[10]],6]]]],[[],[[2,[7,5]]]],[[],[[2,[7,6]]]],[[],[[2,[[3,[10]],5]]]],[[],[[2,[7,11]]]],[[],[[2,[7,4]]]],[[],[[2,[[3,[10]],11]]]],[[],[[2,[[3,[10]],8]]]],[[],[[2,[3,11]]]],[[],[[2,[[3,[9]],11]]]],[[]],[2],[[]],[2],[[]],[[]],[[],[[2,[[3,[10]]]]]],[[],[[2,[7]]]],[[],[[2,[[3,[12]]]]]],[[],[[2,[[3,[9]]]]]],0,0,[2],[[],13],[[],13],[[],14],[[]],[2],[[],6],0,[[]],[[]],[[],1],[[],7],[[]],[[7,15],16],[[]],[[]],[[],13],[[],13],[[],14],[[]],0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],12],[[],9],[[],10],[[],[[3,[17]]]],[[]],[[12,15],16],[[9,15],16],[[10,15],16],[[[3,[18]],15],16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],14],[[],14],[[],14],[[],14],[[]]],"p":[[15,"bool"],[3,"UnionFind"],[3,"QuickUnion"],[15,"u32"],[15,"u64"],[15,"usize"],[3,"QuickFind"],[15,"u8"],[3,"BySize"],[3,"Unweighted"],[15,"u16"],[3,"ByRank"],[4,"Result"],[3,"TypeId"],[3,"Formatter"],[6,"Result"],[8,"Default"],[8,"Debug"],[8,"AlgorithmContainer"],[8,"VertexType"],[8,"Connected"],[8,"Find"],[8,"Union"],[8,"Heuristic"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
